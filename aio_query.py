import os

import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram import F

from db_filling import ObsidianIndexer, DB_CONFIG

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å ObsidianIndexer –∏ DB_CONFIG
# from your_module import ObsidianIndexer, DB_CONFIG

from dotenv import load_dotenv  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–æ—Ç–∞
# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–∫–µ–Ω –±—ã–ª –Ω–∞–π–¥–µ–Ω
if not BOT_TOKEN:
    logger.critical("–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
    exit() # –ò–ª–∏ raise ValueError(...)
    
OBSIDIAN_DIR = "second_brain"  # –ü—É—Ç—å –∫ –≤–∞—à–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∑–∞–º–µ—Ç–∫–∞–º–∏

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∏–Ω–¥–µ–∫—Å–µ—Ä–∞
indexer = None

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


async def initialize_indexer():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞"""
    global indexer
    
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ObsidianIndexer...")
    indexer = ObsidianIndexer(
        obsidian_dir=OBSIDIAN_DIR,
        db_config=DB_CONFIG
    )
    
    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å —á–∏—Å—Ç—ã—Ö —Ç–∞–±–ª–∏—Ü
    # await indexer.raw_start()
    
    logger.info("–ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –∑–∞–º–µ—Ç–æ–∫ Obsidian...")
    await indexer.index_all_files()
    logger.info("–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


@dp.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º Obsidian.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞, –∏ —è –Ω–∞–π–¥—É –ø–æ—Ö–æ–∂–∏–µ –∑–∞–º–µ—Ç–∫–∏!\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
        "/reindex - –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏"
    )


@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        "üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
        "2. –ë–æ—Ç –Ω–∞–π–¥–µ—Ç –¥–æ 3 —Å–∞–º—ã—Ö –ø–æ—Ö–æ–∂–∏—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∏–∑ –≤–∞—à–∏—Ö –∑–∞–º–µ—Ç–æ–∫\n"
        "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /reindex –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞\n\n"
        "–ü—Ä–∏–º–µ—Ä: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ' –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ —ç—Ç—É —Ç–µ–º—É"
    )


@dp.message(Command("reindex"))
async def cmd_reindex(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"""
    global indexer
    
    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –∑–∞–º–µ—Ç–æ–∫...")
    
    try:
        if indexer is None:
            await initialize_indexer()
        else:
            await indexer.index_all_files()
        
        await message.answer("‚úÖ –ü–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {str(e)}")


@dp.message(F.text)
async def handle_search_query(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    global indexer
    
    if indexer is None:
        await message.answer("‚ö†Ô∏è –ò–Ω–¥–µ–∫—Å–µ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /reindex")
        return
    
    query = message.text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    search_message = await message.answer("üîç –ò—â—É –ø–æ—Ö–æ–∂–∏–µ –∑–∞–º–µ—Ç–∫–∏...")
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        results = await indexer.search_similar(query, limit=10)
        
        if not results:
            await search_message.edit_text("üòî –ü–æ—Ö–æ–∂–∏–µ –∑–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: *{query}*\n\n"
        
        for i, result in enumerate(results, 1):
            file_name = result['file_path'].split('/')[-1]  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            distance = result['distance']
            text_preview = result['text'][:200].replace('\n', ' ')
            
            response_text += f"*{i}. {file_name}*\n"
            response_text += f"üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {(1-distance)*100:.1f}%\n"
            response_text += f"üìù –¢–µ–∫—Å—Ç: {text_preview}...\n"
            response_text += f"üìÅ –ü—É—Ç—å: `{result['file_path']}`\n\n"
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(response_text) > 4000:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —á–∞—Å—Ç—è–º
            parts = []
            current_part = f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: *{query}*\n\n"
            
            for i, result in enumerate(results, 1):
                file_name = result['file_path'].split('/')[-1]
                distance = result['distance']
                text_preview = result['text'][:200].replace('\n', ' ')
                
                part_text = f"*{i}. {file_name}*\n"
                part_text += f"üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {(1-distance)*100:.1f}%\n"
                part_text += f"üìù –¢–µ–∫—Å—Ç: {text_preview}...\n"
                part_text += f"üìÅ –ü—É—Ç—å: `{result['file_path']}`\n\n"
                
                if len(current_part + part_text) > 4000:
                    parts.append(current_part)
                    current_part = part_text
                else:
                    current_part += part_text
            
            if current_part:
                parts.append(current_part)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await search_message.edit_text(parts[0], parse_mode="Markdown")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏ –∫–∞–∫ –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            for part in parts[1:]:
                await message.answer(part, parse_mode="Markdown")
        else:
            await search_message.edit_text(response_text, parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
        await search_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}")


async def on_startup():
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await initialize_indexer()
    logger.info("–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


async def on_shutdown():
    """–§—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
    logger.info("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É...")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å–µ—Ä –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        await on_startup()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞...")
        await dp.start_polling(bot)
        
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await on_shutdown()
        await bot.session.close()


if __name__ == "__main__":
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤:
    # pip install aiogram asyncpg aiohttp langchain
    
    asyncio.run(main())